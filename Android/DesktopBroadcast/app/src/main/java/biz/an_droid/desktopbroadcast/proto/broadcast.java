// Generated by the protocol compiler version 1.3.8
// DO NOT EDIT THIS FILE DIRECTLY!

package biz.an_droid.desktopbroadcast.proto;

// Start of the broadcast object hierarchy.

public abstract class broadcast implements java.io.Serializable {
    private static final java.nio.charset.Charset charSet = java.nio.charset.Charset.forName("ISO-8859-1");

    // Data types used in messages, but which aren't messages themselves.

    abstract void marshal(java.io.DataOutputStream out) throws java.io.IOException;

    final static void writeInt(java.io.DataOutputStream out, int tag, long v) throws java.io.IOException
    {
        if (v >= -0x80 && v <= 0x7f) {
            out.writeByte((tag & 0xf0) + 1);
            out.writeByte((int) v);
        } else if (v >= -0x8000 && v <= 0x7fff) {
            out.writeByte((tag & 0xf0) + 2);
            out.writeShort((short) v);
        } else if (v >= -0x800000 && v <= 0x7fffff) {
            out.writeByte((tag & 0xf0) + 3);
            out.writeByte((int) (v >> 16));
            out.writeShort((short) v);
        } else if (v >= -0x80000000L && v <= 0x7fffffffL) {
            out.writeByte((tag & 0xf0) + 4);
            out.writeInt((int) v);
        } else if (v >= -0x8000000000L && v <= 0x7fffffffffL) {
            out.writeByte((tag & 0xf0) + 5);
            out.writeByte((int) (v >> 32));
            out.writeInt((int) v);
        } else if (v >= -0x800000000000L && v <= 0x7fffffffffffL) {
            out.writeByte((tag & 0xf0) + 6);
            out.writeByte((int) (v >> 40));
            out.writeByte((int) (v >> 32));
            out.writeInt((int) v);
        } else if (v >= -0x80000000000000L && v <= 0x7fffffffffffffL) {
            out.writeByte((tag & 0xf0) + 7);
            out.writeByte((int) (v >> 48));
            out.writeByte((int) (v >> 40));
            out.writeByte((int) (v >> 32));
            out.writeInt((int) v);
        } else {
            out.writeByte((tag & 0xf0) + 8);
            out.writeLong(v);
        }
    }

    final static long readInt(java.io.DataInputStream in, int expTag) throws java.io.IOException
    {
       byte tag = in.readByte();
       int len = tag & 0x0f;

       if ((tag & 0xf0) == (expTag & 0xf0) && len > 0 && len <= 8) {
           long v = in.readByte();

           for (int ii = 1; ii < len; ii++)
               v = (v << 8) + (in.readByte() & 0xff);

           return v;
       }

       throw new java.io.IOException("invalid integer for protocol");
    }

    final static int readLength(java.io.DataInputStream in, int tag) throws java.io.IOException
    {
        final long len = readInt(in, tag);

        if (len >= 0 && len <= Integer.MAX_VALUE)
            return (int) len;

        throw new java.io.IOException("invalid length value for protocol");
    }

    static void writeLength(java.io.DataOutputStream out, int tag, int len) throws java.io.IOException
    {
        if (len < 0)
            throw new java.io.IOException("invalid length value for protocol");

        writeInt(out, tag, len);
    }

    static void marshal(java.io.DataOutputStream out, boolean v) throws java.io.IOException
    {
        out.writeByte(v ? 0x71 : 0x70);
    }

    static void marshal(java.io.DataOutputStream out, short v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.io.DataOutputStream out, int v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.io.DataOutputStream out, long v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.io.DataOutputStream out, double v) throws java.io.IOException
    {
        out.writeByte(0x28);
        out.writeLong(Double.doubleToLongBits(v));
    }

    static void marshal(java.io.DataOutputStream out, byte[] v) throws java.io.IOException
    {
        writeLength(out, 0x30, v.length);
        out.write(v);
    }

    static void marshal(java.io.DataOutputStream out, java.lang.String v) throws java.io.IOException
    {
        java.nio.ByteBuffer buf = charSet.encode(v);
        int len = buf.remaining();

        writeLength(out, 0x40, len);
        if (buf.hasArray())
            out.write(buf.array(), buf.arrayOffset() + buf.position(), len);
        else {
            byte[] data = new byte[len];
            buf.get(data);
            out.write(data);
        }
    }

    static boolean unmarshal_bool(java.io.DataInputStream in) throws java.io.IOException
    {
        byte b = in.readByte();

        if (b == 0x70)
            return false;
        else if (b == 0x71)
            return true;
        else
            throw new java.io.IOException("invalid bool value in message");
    }

    static short unmarshal_int16(java.io.DataInputStream in) throws java.io.IOException
    {
        long v = readInt(in, 0x10);

        if (v >= Short.MIN_VALUE && v <= Short.MAX_VALUE)
            return (short) v;

        throw new java.io.IOException("int16 value out of range");
    }

    static int unmarshal_int32(java.io.DataInputStream in) throws java.io.IOException
    {
        long v = readInt(in, 0x10);

        if (v >= Integer.MIN_VALUE && v <= Integer.MAX_VALUE)
            return (int) v;

        throw new java.io.IOException("int32 value out of range");
    }

    static long unmarshal_int64(java.io.DataInputStream in) throws java.io.IOException
    {
        return readInt(in, 0x10);
    }

    static double unmarshal_double(java.io.DataInputStream in) throws java.io.IOException
    {
        if (in.readByte() == 0x28)
            return Double.longBitsToDouble(in.readLong());
        throw new java.io.IOException("expecting tag for double");
    }

    static byte[] unmarshal_binary(java.io.DataInputStream in) throws java.io.IOException
    {
        byte[] b = new byte[readLength(in, 0x30)];

        if (b.length > 0 && (in.read(b) != b.length))
            throw new java.io.IOException("invalid binary length in message");

        return b;
    }

    static java.lang.String unmarshal_string(java.io.DataInputStream in) throws java.io.IOException
    {
        int len = readLength(in, 0x40);
        byte[] buf = new byte[len];
        int total = 0;

        while (total < len) {
            int n = in.read(buf, total, len - total);
            if (n == -1)
                throw new java.io.EOFException();

            total += n;
        }
        return charSet.decode(java.nio.ByteBuffer.wrap(buf)).toString();
    }

    public void marshal(java.io.OutputStream os) throws java.io.IOException
    {
        java.io.DataOutputStream out = new java.io.DataOutputStream(os);

        out.writeBytes("SDD");
        out.writeByte(2);

        marshal(out);
    }

    abstract void _marshal(java.nio.ByteBuffer out) throws java.io.IOException;

    final static void writeInt(java.nio.ByteBuffer out, int tag, long v) throws java.io.IOException
    {
        if (v >= -0x80 && v <= 0x7f) {
            out.put((byte)((tag & 0xf0) + 1));
            out.put((byte)(int) v);
        } else if (v >= -0x8000 && v <= 0x7fff) {
            out.put((byte)((tag & 0xf0) + 2));
            out.putShort((short) v);
        } else if (v >= -0x800000 && v <= 0x7fffff) {
            out.put((byte)((tag & 0xf0) + 3));
            out.put((byte)(int) (v >> 16));
            out.putShort((short) v);
        } else if (v >= -0x80000000L && v <= 0x7fffffffL) {
            out.put((byte)((tag & 0xf0) + 4));
            out.putInt((int) v);
        } else if (v >= -0x8000000000L && v <= 0x7fffffffffL) {
            out.put((byte)((tag & 0xf0) + 5));
            out.put((byte)(int) (v >> 32));
            out.putInt((int) v);
        } else if (v >= -0x800000000000L && v <= 0x7fffffffffffL) {
            out.put((byte)((tag & 0xf0) + 6));
            out.put((byte)(int) (v >> 40));
            out.put((byte)(int) (v >> 32));
            out.putInt((int) v);
        } else if (v >= -0x80000000000000L && v <= 0x7fffffffffffffL) {
            out.put((byte)((tag & 0xf0) + 7));
            out.put((byte)(int) (v >> 48));
            out.put((byte)(int) (v >> 40));
            out.put((byte)(int) (v >> 32));
            out.putInt((int) v);
        } else {
            out.put((byte)((tag & 0xf0) + 8));
            out.putLong(v);
        }
    }

    final static long readInt(java.nio.ByteBuffer in, int expTag) throws java.io.IOException
    {
       byte tag = in.get();
       int len = tag & 0x0f;

       if ((tag & 0xf0) == (expTag & 0xf0) && len > 0 && len <= 8) {
           long v = in.get();

           for (int ii = 1; ii < len; ii++)
               v = (v << 8) + (in.get() & 0xff);

           return v;
       }

       throw new java.io.IOException("invalid integer tag for protocol");
    }

    final static int readLength(java.nio.ByteBuffer in, int tag) throws java.io.IOException
    {
        final long len = readInt(in, tag);

        if (len >= 0 && len <= Integer.MAX_VALUE)
            return (int) len;

        throw new java.io.IOException("invalid length value for protocol");
    }

    static void writeLength(java.nio.ByteBuffer out, int tag, int len) throws java.io.IOException
    {
        if (len < 0)
            throw new java.io.IOException("invalid length value for protocol");

        writeInt(out, tag, len);
    }

    public java.nio.ByteBuffer marshal(java.nio.ByteBuffer out) throws java.io.IOException
    {
        out.put((byte)83);
        out.put((byte)68);
        out.put((byte)68);
        out.put((byte)2);
        _marshal(out);

        return out;
    }

    static void marshal(java.nio.ByteBuffer out, boolean v) throws java.io.IOException
    {
        out.put(v ? (byte)0x71 : (byte)0x70);
    }

    static void marshal(java.nio.ByteBuffer out, short v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.nio.ByteBuffer out, int v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.nio.ByteBuffer out, long v) throws java.io.IOException
    {
        writeInt(out, 0x10, v);
    }

    static void marshal(java.nio.ByteBuffer out, double v) throws java.io.IOException
    {
        out.put((byte) 0x28);
        out.putLong(Double.doubleToLongBits(v));
    }

    static void marshal(java.nio.ByteBuffer out, byte[] v) throws java.io.IOException
    {
        writeLength(out, 0x30, v.length);
        out.put(v);
    }

    static void marshal(java.nio.ByteBuffer out, java.lang.String v) throws java.io.IOException
    {
        java.nio.ByteBuffer buf = charSet.encode(v);
        writeLength(out, 0x40, buf.remaining());
        out.put(buf);
    }

    static boolean unmarshal_bool(java.nio.ByteBuffer in) throws java.io.IOException
    {
        byte b = in.get();

        if (b == 0x70)
            return false;
        else if (b == 0x71)
            return true;
        else
            throw new java.io.IOException("invalid bool value in message");
    }

    static short unmarshal_int16(java.nio.ByteBuffer in) throws java.io.IOException
    {
        long v = readInt(in, 0x10);

        if (v >= Short.MIN_VALUE && v <= Short.MAX_VALUE)
            return (short) v;

        throw new java.io.IOException("int16 value out of range");
    }

    static int unmarshal_int32(java.nio.ByteBuffer in) throws java.io.IOException
    {
        long v = readInt(in, 0x10);

        if (v >= Integer.MIN_VALUE && v <= Integer.MAX_VALUE)
            return (int) v;

        throw new java.io.IOException("int32 value out of range");
    }

    static long unmarshal_int64(java.nio.ByteBuffer in) throws java.io.IOException
    {
        return readInt(in, 0x10);
    }

    static double unmarshal_double(java.nio.ByteBuffer in) throws java.io.IOException
    {
        if (in.get() == 0x28)
            return Double.longBitsToDouble(in.getLong());
        throw new java.io.IOException("expecting tag for double");
    }

    static byte[] unmarshal_binary(java.nio.ByteBuffer in) throws java.io.IOException
    {
        byte[] b = new byte[readLength(in, 0x30)];

        in.get(b);
        return b;
    }

    static java.lang.String unmarshal_string(java.nio.ByteBuffer in) throws java.io.IOException
    {
        byte[] buf = new byte[readLength(in, 0x40)];
        in.get(buf);
        return charSet.decode(java.nio.ByteBuffer.wrap(buf)).toString();
    }

    static int encodedVariableLength(int len)
    {
        if (len > 0xff) {
            if (len > 0xffff) {
                if (len > 0xffffff)
                    return 5;
                return 4;
            }
            return 3;
        }
        return 2;
    }

    static boolean equals(Object o1, Object o2)
    {
        if (o1 == null && o2 == null)
            return true;

        if (o1 != null)
            return o1.equals(o2);

        return false;
    }

    static boolean equals(byte[] o1, byte[] o2)
    {
        return java.util.Arrays.equals(o1, o2);
    }

    static boolean equals(Object[] o1, Object[] o2)
    {        return java.util.Arrays.equals(o1, o2);
    }

    static boolean equals(byte[][] o1, byte[][] o2)
    {
        if (o1 == null && o2 == null)
            return true;

        if (o1 == null || o2 == null)
            return false;

        if (o1.length == o2.length) {
            for (int ii = 0; ii < o1.length; ii++)
                if (!java.util.Arrays.equals(o1[ii], o2[ii]))
                    return false;

            return true;
        }

        return false;
    }

    //
    // Request types
    //
    public abstract static class Request extends broadcast {

        public static broadcast.Request unmarshal(java.io.InputStream is) throws java.io.IOException
        {
            java.io.DataInputStream in = new java.io.DataInputStream(is);

            byte[] hdr = new byte[3];
            if (in.read(hdr) != hdr.length)
                throw new java.io.IOException("invalid SDD message format");

            if (!(new java.lang.String(hdr)).equals("SDD"))
                throw new java.io.IOException("invalid SDD message format");

            if (in.readByte() != 2)
                throw new java.io.IOException("invalid SDD version number");

            if (readLength(in, 0x50) != 3)
                throw new java.io.IOException("invalid start of message for the 'broadcast' protocol");

            if (unmarshal_int32(in) != -1241126304)
                throw new java.io.IOException("unknown protocol");

            switch (unmarshal_int16(in)) {
             case 13879:
                return unmarshal_connect(in);

             default:
                throw new java.io.IOException("invalid message for 'broadcast' protocol");
            }
        }

        static void marshal(java.io.DataOutputStream out, connect v) throws java.io.IOException
        {
            out.writeByte(81);
            out.writeByte(8);

            out.writeByte(18);
            out.writeByte(26);
            out.writeByte(-81);
            marshal(out, v.version_client);

            out.writeByte(18);
            out.writeByte(-126);
            out.writeByte(-7);
            marshal(out, v.screen_width);

            out.writeByte(18);
            out.writeByte(4);
            out.writeByte(110);
            marshal(out, v.screen_height);

            out.writeByte(18);
            out.writeByte(82);
            out.writeByte(-59);
            marshal(out, v.win_caption);
        }

        static connect unmarshal_connect(java.io.DataInputStream in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(4);
            connect d = new connect();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case 6831: //int32 version_client
                {
                    flg.set(0);
                    d.version_client = unmarshal_int32(in);
                }
                break;

             case -32007: //int32 screen_width
                {
                    flg.set(1);
                    d.screen_width = unmarshal_int32(in);
                }
                break;

             case 1134: //int32 screen_height
                {
                    flg.set(2);
                    d.screen_height = unmarshal_int32(in);
                }
                break;

             case 21189: //string win_caption
                {
                    flg.set(3);
                    d.win_caption = unmarshal_string(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 4)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        public static broadcast.Request unmarshal(java.nio.ByteBuffer in) throws java.io.IOException
        {
            byte[] hdr = new byte[3];

            in.get(hdr);

            if (!(new java.lang.String(hdr)).equals("SDD"))
                throw new java.io.IOException("invalid SDD message format");

            if (in.get() != 2)
                throw new java.io.IOException("invalid SDD version number");

            if (readLength(in, 0x50) != 3)
                throw new java.io.IOException("invalid start of message for the 'broadcast' protocol");

            if (unmarshal_int32(in) != -1241126304)
                throw new java.io.IOException("unknown protocol");

            switch (unmarshal_int16(in)) {
             case 13879:
                return unmarshal_connect(in);

             default:
                throw new java.io.IOException("invalid message for 'broadcast' protocol");
            }
        }

        static void marshal(java.nio.ByteBuffer out, connect v) throws java.io.IOException
        {
            out.put((byte)81);
            out.put((byte)8);

            out.put((byte)18);
            out.put((byte)26);
            out.put((byte)-81);
            marshal(out, v.version_client);

            out.put((byte)18);
            out.put((byte)-126);
            out.put((byte)-7);
            marshal(out, v.screen_width);

            out.put((byte)18);
            out.put((byte)4);
            out.put((byte)110);
            marshal(out, v.screen_height);

            out.put((byte)18);
            out.put((byte)82);
            out.put((byte)-59);
            marshal(out, v.win_caption);
        }

        static connect unmarshal_connect(java.nio.ByteBuffer in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(4);
            connect d = new connect();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case 6831: //int32 version_client
                {
                    flg.set(0);
                    d.version_client = unmarshal_int32(in);
                }
                break;

             case -32007: //int32 screen_width
                {
                    flg.set(1);
                    d.screen_width = unmarshal_int32(in);
                }
                break;

             case 1134: //int32 screen_height
                {
                    flg.set(2);
                    d.screen_height = unmarshal_int32(in);
                }
                break;

             case 21189: //string win_caption
                {
                    flg.set(3);
                    d.win_caption = unmarshal_string(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 4)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        // Interface for receiving all messages.

        public interface Receiver {
            void handle(connect m);
        }

        public abstract void deliverTo(Receiver r);

        public static class connect extends Request {
            static final long serialVersionUID = 1588514567L;
            public int version_client;
            public int screen_width;
            public int screen_height;
            public java.lang.String win_caption;

            public connect()
            {
                version_client = 0;
                screen_width = 0;
                screen_height = 0;
                win_caption = "";
            }

            public void deliverTo(Receiver r)
            {
                r.handle(this);
            }

            void marshal(java.io.DataOutputStream out) throws java.io.IOException
            {
                out.writeByte(0x51);
                out.writeByte(3);

                // Protocol name

                out.writeByte(20);
                out.writeByte(-74);
                out.writeByte(5);
                out.writeByte(-22);
                out.writeByte(96);

                // Message name

                out.writeByte(18);
                out.writeByte(54);
                out.writeByte(55);

                // Message

                marshal(out, this);
            }

            void _marshal(java.nio.ByteBuffer out) throws java.io.IOException
            {
                out.put((byte)0x51);
                out.put((byte)3);

                // Protocol name

                out.put((byte)20);
                out.put((byte)-74);
                out.put((byte)5);
                out.put((byte)-22);
                out.put((byte)96);

                // Message name

                out.put((byte)18);
                out.put((byte)54);
                out.put((byte)55);

                // Message

                marshal(out, this);
            }

            public boolean equals(Object _o)
            {
                if (_o instanceof connect) {
                    connect o = (connect) _o;

                    return version_client == o.version_client && 
                        screen_width == o.screen_width && 
                        screen_height == o.screen_height && 
                        broadcast.equals(win_caption, o.win_caption);
                }

                return false;
            }

            public int hashCode()
            {
                return version_client + 
                        screen_width + 
                        screen_height + 
                        win_caption.hashCode();
            }

            public java.lang.String toString()
            {
                StringBuilder buf = new StringBuilder("Request connect {\n");

                buf.append("    int32 version_client = ");
                buf.append(version_client);
                buf.append(";\n");

                buf.append("    int32 screen_width = ");
                buf.append(screen_width);
                buf.append(";\n");

                buf.append("    int32 screen_height = ");
                buf.append(screen_height);
                buf.append(";\n");

                buf.append("    string win_caption = ");
                if (win_caption != null)
                    buf.append('"');
                buf.append(win_caption);
                if (win_caption != null)
                    buf.append('"');
                buf.append(";\n");

                buf.append("}\n");
                return buf.toString();
            }
        }

    }

    //
    // Reply types
    //
    public abstract static class Reply extends broadcast {

        public static broadcast.Reply unmarshal(java.io.InputStream is) throws java.io.IOException
        {
            java.io.DataInputStream in = new java.io.DataInputStream(is);

            byte[] hdr = new byte[3];
            if (in.read(hdr) != hdr.length)
                throw new java.io.IOException("invalid SDD message format");

            if (!(new java.lang.String(hdr)).equals("SDD"))
                throw new java.io.IOException("invalid SDD message format");

            if (in.readByte() != 2)
                throw new java.io.IOException("invalid SDD version number");

            if (readLength(in, 0x50) != 3)
                throw new java.io.IOException("invalid start of message for the 'broadcast' protocol");

            if (unmarshal_int32(in) != -1241126304)
                throw new java.io.IOException("unknown protocol");

            switch (unmarshal_int16(in)) {
             case -11031:
                return unmarshal_Error(in);

             case -32638:
                return unmarshal_connected(in);

             case -32373:
                return unmarshal_frame(in);

             default:
                throw new java.io.IOException("invalid message for 'broadcast' protocol");
            }
        }

        static void marshal(java.io.DataOutputStream out, Error v) throws java.io.IOException
        {
            out.writeByte(81);
            out.writeByte(4);

            out.writeByte(18);
            out.writeByte(103);
            out.writeByte(-108);
            marshal(out, v.code);

            out.writeByte(18);
            out.writeByte(49);
            out.writeByte(2);
            marshal(out, v.message);
        }

        static void marshal(java.io.DataOutputStream out, connected v) throws java.io.IOException
        {
            out.writeByte(81);
            out.writeByte(2);

            out.writeByte(18);
            out.writeByte(-16);
            out.writeByte(-49);
            marshal(out, v.server_version);
        }

        static void marshal(java.io.DataOutputStream out, frame v) throws java.io.IOException
        {
            out.writeByte(81);
            out.writeByte(6);

            out.writeByte(18);
            out.writeByte(-104);
            out.writeByte(-68);
            marshal(out, v.timestamp_ns);

            out.writeByte(18);
            out.writeByte(104);
            out.writeByte(-42);
            marshal(out, v.flags);

            out.writeByte(18);
            out.writeByte(127);
            out.writeByte(56);
            marshal(out, v.data);
        }

        static Error unmarshal_Error(java.io.DataInputStream in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(2);
            Error d = new Error();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case 26516: //int32 code
                {
                    flg.set(0);
                    d.code = unmarshal_int32(in);
                }
                break;

             case 12546: //string message
                {
                    flg.set(1);
                    d.message = unmarshal_string(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 2)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        static connected unmarshal_connected(java.io.DataInputStream in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(1);
            connected d = new connected();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case -3889: //int32 server_version
                {
                    flg.set(0);
                    d.server_version = unmarshal_int32(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 1)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        static frame unmarshal_frame(java.io.DataInputStream in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(3);
            frame d = new frame();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case -26436: //int64 timestamp_ns
                {
                    flg.set(0);
                    d.timestamp_ns = unmarshal_int64(in);
                }
                break;

             case 26838: //int32 flags
                {
                    flg.set(1);
                    d.flags = unmarshal_int32(in);
                }
                break;

             case 32568: //binary data
                {
                    flg.set(2);
                    d.data = unmarshal_binary(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 3)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        public static broadcast.Reply unmarshal(java.nio.ByteBuffer in) throws java.io.IOException
        {
            byte[] hdr = new byte[3];

            in.get(hdr);

            if (!(new java.lang.String(hdr)).equals("SDD"))
                throw new java.io.IOException("invalid SDD message format");

            if (in.get() != 2)
                throw new java.io.IOException("invalid SDD version number");

            if (readLength(in, 0x50) != 3)
                throw new java.io.IOException("invalid start of message for the 'broadcast' protocol");

            if (unmarshal_int32(in) != -1241126304)
                throw new java.io.IOException("unknown protocol");

            switch (unmarshal_int16(in)) {
             case -11031:
                return unmarshal_Error(in);

             case -32638:
                return unmarshal_connected(in);

             case -32373:
                return unmarshal_frame(in);

             default:
                throw new java.io.IOException("invalid message for 'broadcast' protocol");
            }
        }

        static void marshal(java.nio.ByteBuffer out, Error v) throws java.io.IOException
        {
            out.put((byte)81);
            out.put((byte)4);

            out.put((byte)18);
            out.put((byte)103);
            out.put((byte)-108);
            marshal(out, v.code);

            out.put((byte)18);
            out.put((byte)49);
            out.put((byte)2);
            marshal(out, v.message);
        }

        static void marshal(java.nio.ByteBuffer out, connected v) throws java.io.IOException
        {
            out.put((byte)81);
            out.put((byte)2);

            out.put((byte)18);
            out.put((byte)-16);
            out.put((byte)-49);
            marshal(out, v.server_version);
        }

        static void marshal(java.nio.ByteBuffer out, frame v) throws java.io.IOException
        {
            out.put((byte)81);
            out.put((byte)6);

            out.put((byte)18);
            out.put((byte)-104);
            out.put((byte)-68);
            marshal(out, v.timestamp_ns);

            out.put((byte)18);
            out.put((byte)104);
            out.put((byte)-42);
            marshal(out, v.flags);

            out.put((byte)18);
            out.put((byte)127);
            out.put((byte)56);
            marshal(out, v.data);
        }

        static Error unmarshal_Error(java.nio.ByteBuffer in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(2);
            Error d = new Error();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case 26516: //int32 code
                {
                    flg.set(0);
                    d.code = unmarshal_int32(in);
                }
                break;

             case 12546: //string message
                {
                    flg.set(1);
                    d.message = unmarshal_string(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 2)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        static connected unmarshal_connected(java.nio.ByteBuffer in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(1);
            connected d = new connected();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case -3889: //int32 server_version
                {
                    flg.set(0);
                    d.server_version = unmarshal_int32(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 1)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        static frame unmarshal_frame(java.nio.ByteBuffer in) throws java.io.IOException
        {
            final int flds = readLength(in, 0x50);

            if (flds < 0)
                throw new java.io.IOException("invalid array size");

            java.util.BitSet flg = new java.util.BitSet(3);
            frame d = new frame();

            for (int ii = 0; ii < flds; ii += 2) {
                switch (unmarshal_int16(in)) {
             case -26436: //int64 timestamp_ns
                {
                    flg.set(0);
                    d.timestamp_ns = unmarshal_int64(in);
                }
                break;

             case 26838: //int32 flags
                {
                    flg.set(1);
                    d.flags = unmarshal_int32(in);
                }
                break;

             case 32568: //binary data
                {
                    flg.set(2);
                    d.data = unmarshal_binary(in);
                }
                break;

                 default:
                    throw new java.io.IOException("unknown field in message");
                }
            }

            if (flg.cardinality() != 3)
                throw new java.io.IOException("missing required field(s)");

            return d;
        }

        // Interface for receiving all messages.

        public interface Receiver {
            void handle(Error m);
            void handle(connected m);
            void handle(frame m);
        }

        public abstract void deliverTo(Receiver r);

        public static class Error extends Reply {
            static final long serialVersionUID = 74909004L;
            public int code;
            public java.lang.String message;

            public Error()
            {
                code = 0;
                message = "";
            }

            public void deliverTo(Receiver r)
            {
                r.handle(this);
            }

            void marshal(java.io.DataOutputStream out) throws java.io.IOException
            {
                out.writeByte(0x51);
                out.writeByte(3);

                // Protocol name

                out.writeByte(20);
                out.writeByte(-74);
                out.writeByte(5);
                out.writeByte(-22);
                out.writeByte(96);

                // Message name

                out.writeByte(18);
                out.writeByte(-44);
                out.writeByte(-23);

                // Message

                marshal(out, this);
            }

            void _marshal(java.nio.ByteBuffer out) throws java.io.IOException
            {
                out.put((byte)0x51);
                out.put((byte)3);

                // Protocol name

                out.put((byte)20);
                out.put((byte)-74);
                out.put((byte)5);
                out.put((byte)-22);
                out.put((byte)96);

                // Message name

                out.put((byte)18);
                out.put((byte)-44);
                out.put((byte)-23);

                // Message

                marshal(out, this);
            }

            public boolean equals(Object _o)
            {
                if (_o instanceof Error) {
                    Error o = (Error) _o;

                    return code == o.code && 
                        broadcast.equals(message, o.message);
                }

                return false;
            }

            public int hashCode()
            {
                return code + 
                        message.hashCode();
            }

            public java.lang.String toString()
            {
                StringBuilder buf = new StringBuilder("Reply Error {\n");

                buf.append("    int32 code = ");
                buf.append(code);
                buf.append(";\n");

                buf.append("    string message = ");
                if (message != null)
                    buf.append('"');
                buf.append(message);
                if (message != null)
                    buf.append('"');
                buf.append(";\n");

                buf.append("}\n");
                return buf.toString();
            }
        }

        public static class connected extends Reply {
            static final long serialVersionUID = -16502658L;
            public int server_version;

            public connected()
            {
                server_version = 0;
            }

            public void deliverTo(Receiver r)
            {
                r.handle(this);
            }

            void marshal(java.io.DataOutputStream out) throws java.io.IOException
            {
                out.writeByte(0x51);
                out.writeByte(3);

                // Protocol name

                out.writeByte(20);
                out.writeByte(-74);
                out.writeByte(5);
                out.writeByte(-22);
                out.writeByte(96);

                // Message name

                out.writeByte(18);
                out.writeByte(-128);
                out.writeByte(-126);

                // Message

                marshal(out, this);
            }

            void _marshal(java.nio.ByteBuffer out) throws java.io.IOException
            {
                out.put((byte)0x51);
                out.put((byte)3);

                // Protocol name

                out.put((byte)20);
                out.put((byte)-74);
                out.put((byte)5);
                out.put((byte)-22);
                out.put((byte)96);

                // Message name

                out.put((byte)18);
                out.put((byte)-128);
                out.put((byte)-126);

                // Message

                marshal(out, this);
            }

            public boolean equals(Object _o)
            {
                if (_o instanceof connected) {
                    connected o = (connected) _o;

                    return server_version == o.server_version;
                }

                return false;
            }

            public int hashCode()
            {
                return server_version;
            }

            public java.lang.String toString()
            {
                StringBuilder buf = new StringBuilder("Reply connected {\n");

                buf.append("    int32 server_version = ");
                buf.append(server_version);
                buf.append(";\n");

                buf.append("}\n");
                return buf.toString();
            }
        }

        public static class frame extends Reply {
            static final long serialVersionUID = 385019932L;
            public long timestamp_ns;
            public int flags;
            public byte[] data;

            public frame()
            {
                timestamp_ns = 0;
                flags = 0;
                data = new byte[0];
            }

            public void deliverTo(Receiver r)
            {
                r.handle(this);
            }

            void marshal(java.io.DataOutputStream out) throws java.io.IOException
            {
                out.writeByte(0x51);
                out.writeByte(3);

                // Protocol name

                out.writeByte(20);
                out.writeByte(-74);
                out.writeByte(5);
                out.writeByte(-22);
                out.writeByte(96);

                // Message name

                out.writeByte(18);
                out.writeByte(-127);
                out.writeByte(-117);

                // Message

                marshal(out, this);
            }

            void _marshal(java.nio.ByteBuffer out) throws java.io.IOException
            {
                out.put((byte)0x51);
                out.put((byte)3);

                // Protocol name

                out.put((byte)20);
                out.put((byte)-74);
                out.put((byte)5);
                out.put((byte)-22);
                out.put((byte)96);

                // Message name

                out.put((byte)18);
                out.put((byte)-127);
                out.put((byte)-117);

                // Message

                marshal(out, this);
            }

            public boolean equals(Object _o)
            {
                if (_o instanceof frame) {
                    frame o = (frame) _o;

                    return timestamp_ns == o.timestamp_ns && 
                        flags == o.flags && 
                        broadcast.equals(data, o.data);
                }

                return false;
            }

            public int hashCode()
            {
                return (new Long(timestamp_ns).hashCode()) + 
                        flags + 
                        java.util.Arrays.hashCode(data);
            }

            public java.lang.String toString()
            {
                StringBuilder buf = new StringBuilder("Reply frame {\n");

                buf.append("    int64 timestamp_ns = ");
                buf.append(timestamp_ns);
                buf.append(";\n");

                buf.append("    int32 flags = ");
                buf.append(flags);
                buf.append(";\n");

                buf.append("    binary data = ");
                if (data != null) {
                    buf.append("binary[");
                    buf.append(data.length);
                    buf.append("];\n");
                } else
                    buf.append("null;\n");

                buf.append("}\n");
                return buf.toString();
            }
        }

    }

}

